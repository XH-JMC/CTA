// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rmservice

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - BranchType
//  - Xid
//  - BranchId
//  - ResourceId
type ResourceRequest struct {
  BranchType int32 `thrift:"BranchType,1" json:"branch_type"`
  Xid string `thrift:"Xid,2" json:"xid"`
  BranchId int64 `thrift:"BranchId,3" json:"branch_id"`
  ResourceId string `thrift:"ResourceId,4" json:"reosurce_id"`
}

func NewResourceRequest() *ResourceRequest {
  return &ResourceRequest{}
}


func (p *ResourceRequest) GetBranchType() int32 {
  return p.BranchType
}

func (p *ResourceRequest) GetXid() string {
  return p.Xid
}

func (p *ResourceRequest) GetBranchId() int64 {
  return p.BranchId
}

func (p *ResourceRequest) GetResourceId() string {
  return p.ResourceId
}
func (p *ResourceRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BranchType = v
}
  return nil
}

func (p *ResourceRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Xid = v
}
  return nil
}

func (p *ResourceRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BranchId = v
}
  return nil
}

func (p *ResourceRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ResourceId = v
}
  return nil
}

func (p *ResourceRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResourceRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BranchType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:BranchType: ", p), err) }
  if err := oprot.WriteI32(int32(p.BranchType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BranchType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:BranchType: ", p), err) }
  return err
}

func (p *ResourceRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Xid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Xid: ", p), err) }
  if err := oprot.WriteString(string(p.Xid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Xid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Xid: ", p), err) }
  return err
}

func (p *ResourceRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BranchId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:BranchId: ", p), err) }
  if err := oprot.WriteI64(int64(p.BranchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BranchId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:BranchId: ", p), err) }
  return err
}

func (p *ResourceRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ResourceId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ResourceId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ResourceId: ", p), err) }
  return err
}

func (p *ResourceRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceRequest(%+v)", *p)
}

// Attributes:
//  - BranchStatus
//  - Error
type ResourceResponse struct {
  BranchStatus int32 `thrift:"BranchStatus,1" json:"branch_status"`
  Error string `thrift:"Error,2" json:"error"`
}

func NewResourceResponse() *ResourceResponse {
  return &ResourceResponse{}
}


func (p *ResourceResponse) GetBranchStatus() int32 {
  return p.BranchStatus
}

func (p *ResourceResponse) GetError() string {
  return p.Error
}
func (p *ResourceResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BranchStatus = v
}
  return nil
}

func (p *ResourceResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *ResourceResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResourceResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BranchStatus", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:BranchStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.BranchStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BranchStatus (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:BranchStatus: ", p), err) }
  return err
}

func (p *ResourceResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Error", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Error: ", p), err) }
  if err := oprot.WriteString(string(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Error (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Error: ", p), err) }
  return err
}

func (p *ResourceResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceResponse(%+v)", *p)
}

type ResourceManagerBaseService interface {
  // Parameters:
  //  - Req
  Ping(ctx context.Context, req string) (r string, err error)
  // Parameters:
  //  - Req
  BranchCommit(ctx context.Context, req *ResourceRequest) (r *ResourceResponse, err error)
  // Parameters:
  //  - Req
  BranchRollback(ctx context.Context, req *ResourceRequest) (r *ResourceResponse, err error)
}

type ResourceManagerBaseServiceClient struct {
  c thrift.TClient
}

func NewResourceManagerBaseServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ResourceManagerBaseServiceClient {
  return &ResourceManagerBaseServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewResourceManagerBaseServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ResourceManagerBaseServiceClient {
  return &ResourceManagerBaseServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewResourceManagerBaseServiceClient(c thrift.TClient) *ResourceManagerBaseServiceClient {
  return &ResourceManagerBaseServiceClient{
    c: c,
  }
}

func (p *ResourceManagerBaseServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *ResourceManagerBaseServiceClient) Ping(ctx context.Context, req string) (r string, err error) {
  var _args0 ResourceManagerBaseServicePingArgs
  _args0.Req = req
  var _result1 ResourceManagerBaseServicePingResult
  if err = p.Client_().Call(ctx, "Ping", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ResourceManagerBaseServiceClient) BranchCommit(ctx context.Context, req *ResourceRequest) (r *ResourceResponse, err error) {
  var _args2 ResourceManagerBaseServiceBranchCommitArgs
  _args2.Req = req
  var _result3 ResourceManagerBaseServiceBranchCommitResult
  if err = p.Client_().Call(ctx, "BranchCommit", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ResourceManagerBaseServiceClient) BranchRollback(ctx context.Context, req *ResourceRequest) (r *ResourceResponse, err error) {
  var _args4 ResourceManagerBaseServiceBranchRollbackArgs
  _args4.Req = req
  var _result5 ResourceManagerBaseServiceBranchRollbackResult
  if err = p.Client_().Call(ctx, "BranchRollback", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

type ResourceManagerBaseServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ResourceManagerBaseService
}

func (p *ResourceManagerBaseServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ResourceManagerBaseServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ResourceManagerBaseServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewResourceManagerBaseServiceProcessor(handler ResourceManagerBaseService) *ResourceManagerBaseServiceProcessor {

  self6 := &ResourceManagerBaseServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["Ping"] = &resourceManagerBaseServiceProcessorPing{handler:handler}
  self6.processorMap["BranchCommit"] = &resourceManagerBaseServiceProcessorBranchCommit{handler:handler}
  self6.processorMap["BranchRollback"] = &resourceManagerBaseServiceProcessorBranchRollback{handler:handler}
return self6
}

func (p *ResourceManagerBaseServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x7

}

type resourceManagerBaseServiceProcessorPing struct {
  handler ResourceManagerBaseService
}

func (p *resourceManagerBaseServiceProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResourceManagerBaseServicePingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResourceManagerBaseServicePingResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Ping(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err2.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type resourceManagerBaseServiceProcessorBranchCommit struct {
  handler ResourceManagerBaseService
}

func (p *resourceManagerBaseServiceProcessorBranchCommit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResourceManagerBaseServiceBranchCommitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("BranchCommit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResourceManagerBaseServiceBranchCommitResult{}
var retval *ResourceResponse
  var err2 error
  if retval, err2 = p.handler.BranchCommit(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BranchCommit: " + err2.Error())
    oprot.WriteMessageBegin("BranchCommit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("BranchCommit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type resourceManagerBaseServiceProcessorBranchRollback struct {
  handler ResourceManagerBaseService
}

func (p *resourceManagerBaseServiceProcessorBranchRollback) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResourceManagerBaseServiceBranchRollbackArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("BranchRollback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResourceManagerBaseServiceBranchRollbackResult{}
var retval *ResourceResponse
  var err2 error
  if retval, err2 = p.handler.BranchRollback(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BranchRollback: " + err2.Error())
    oprot.WriteMessageBegin("BranchRollback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("BranchRollback", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type ResourceManagerBaseServicePingArgs struct {
  Req string `thrift:"req,1" db:"req" json:"req"`
}

func NewResourceManagerBaseServicePingArgs() *ResourceManagerBaseServicePingArgs {
  return &ResourceManagerBaseServicePingArgs{}
}


func (p *ResourceManagerBaseServicePingArgs) GetReq() string {
  return p.Req
}
func (p *ResourceManagerBaseServicePingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceManagerBaseServicePingArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Req = v
}
  return nil
}

func (p *ResourceManagerBaseServicePingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceManagerBaseServicePingArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := oprot.WriteString(string(p.Req)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ResourceManagerBaseServicePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceManagerBaseServicePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ResourceManagerBaseServicePingResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewResourceManagerBaseServicePingResult() *ResourceManagerBaseServicePingResult {
  return &ResourceManagerBaseServicePingResult{}
}

var ResourceManagerBaseServicePingResult_Success_DEFAULT string
func (p *ResourceManagerBaseServicePingResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ResourceManagerBaseServicePingResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ResourceManagerBaseServicePingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ResourceManagerBaseServicePingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceManagerBaseServicePingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ResourceManagerBaseServicePingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceManagerBaseServicePingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ResourceManagerBaseServicePingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceManagerBaseServicePingResult(%+v)", *p)
}

// Attributes:
//  - Req
type ResourceManagerBaseServiceBranchCommitArgs struct {
  Req *ResourceRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewResourceManagerBaseServiceBranchCommitArgs() *ResourceManagerBaseServiceBranchCommitArgs {
  return &ResourceManagerBaseServiceBranchCommitArgs{}
}

var ResourceManagerBaseServiceBranchCommitArgs_Req_DEFAULT *ResourceRequest
func (p *ResourceManagerBaseServiceBranchCommitArgs) GetReq() *ResourceRequest {
  if !p.IsSetReq() {
    return ResourceManagerBaseServiceBranchCommitArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ResourceManagerBaseServiceBranchCommitArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ResourceManagerBaseServiceBranchCommitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceManagerBaseServiceBranchCommitArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ResourceRequest{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ResourceManagerBaseServiceBranchCommitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BranchCommit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceManagerBaseServiceBranchCommitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ResourceManagerBaseServiceBranchCommitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceManagerBaseServiceBranchCommitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ResourceManagerBaseServiceBranchCommitResult struct {
  Success *ResourceResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewResourceManagerBaseServiceBranchCommitResult() *ResourceManagerBaseServiceBranchCommitResult {
  return &ResourceManagerBaseServiceBranchCommitResult{}
}

var ResourceManagerBaseServiceBranchCommitResult_Success_DEFAULT *ResourceResponse
func (p *ResourceManagerBaseServiceBranchCommitResult) GetSuccess() *ResourceResponse {
  if !p.IsSetSuccess() {
    return ResourceManagerBaseServiceBranchCommitResult_Success_DEFAULT
  }
return p.Success
}
func (p *ResourceManagerBaseServiceBranchCommitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ResourceManagerBaseServiceBranchCommitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceManagerBaseServiceBranchCommitResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ResourceResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ResourceManagerBaseServiceBranchCommitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BranchCommit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceManagerBaseServiceBranchCommitResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ResourceManagerBaseServiceBranchCommitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceManagerBaseServiceBranchCommitResult(%+v)", *p)
}

// Attributes:
//  - Req
type ResourceManagerBaseServiceBranchRollbackArgs struct {
  Req *ResourceRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewResourceManagerBaseServiceBranchRollbackArgs() *ResourceManagerBaseServiceBranchRollbackArgs {
  return &ResourceManagerBaseServiceBranchRollbackArgs{}
}

var ResourceManagerBaseServiceBranchRollbackArgs_Req_DEFAULT *ResourceRequest
func (p *ResourceManagerBaseServiceBranchRollbackArgs) GetReq() *ResourceRequest {
  if !p.IsSetReq() {
    return ResourceManagerBaseServiceBranchRollbackArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ResourceManagerBaseServiceBranchRollbackArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ResourceManagerBaseServiceBranchRollbackArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceManagerBaseServiceBranchRollbackArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ResourceRequest{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ResourceManagerBaseServiceBranchRollbackArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BranchRollback_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceManagerBaseServiceBranchRollbackArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ResourceManagerBaseServiceBranchRollbackArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceManagerBaseServiceBranchRollbackArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ResourceManagerBaseServiceBranchRollbackResult struct {
  Success *ResourceResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewResourceManagerBaseServiceBranchRollbackResult() *ResourceManagerBaseServiceBranchRollbackResult {
  return &ResourceManagerBaseServiceBranchRollbackResult{}
}

var ResourceManagerBaseServiceBranchRollbackResult_Success_DEFAULT *ResourceResponse
func (p *ResourceManagerBaseServiceBranchRollbackResult) GetSuccess() *ResourceResponse {
  if !p.IsSetSuccess() {
    return ResourceManagerBaseServiceBranchRollbackResult_Success_DEFAULT
  }
return p.Success
}
func (p *ResourceManagerBaseServiceBranchRollbackResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ResourceManagerBaseServiceBranchRollbackResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceManagerBaseServiceBranchRollbackResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ResourceResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ResourceManagerBaseServiceBranchRollbackResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BranchRollback_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceManagerBaseServiceBranchRollbackResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ResourceManagerBaseServiceBranchRollbackResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceManagerBaseServiceBranchRollbackResult(%+v)", *p)
}


